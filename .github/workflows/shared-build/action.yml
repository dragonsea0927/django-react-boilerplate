name: "Shared Build Steps"
description: "Shared build steps for main and nightly"

runs:
  using: "composite"
  steps:
    - name: Store branch and latest SHA
      id: vars
      shell: bash
      run: |
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.11"
    - name: Setup Node
      uses: actions/setup-node@v2
      with:
        node-version: "18.2"
    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: node-modules-cache
      with:
        path: ~/.npm
        key: build-${{ env.cache-name }}-${{ steps.vars.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
        restore-keys: |
          build-${{ env.cache-name }}-${{ steps.vars.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
          build-${{ env.cache-name }}-${{ steps.vars.outputs.branch }}
          build-${{ env.cache-name }}
    - name: Cache pip
      uses: actions/cache@v2
      env:
        cache-name: pip-cache
      with:
        path: ~/.cache/pip
        key: build-${{ env.cache-name }}-${{ steps.vars.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
        restore-keys: |
          build-${{ env.cache-name }}-${{ steps.vars.outputs.branch }}-${{ steps.vars.outputs.sha_short }}
          build-${{ env.cache-name }}-${{ steps.vars.outputs.branch }}
          build-${{ env.cache-name }}
    - run: python -m pip install --upgrade pip
      shell: bash
    - name: Install Django
      run: pip install "django>=4,<5"
      shell: bash
    - name: Setup testproject
      run: django-admin startproject testproject --extension py,yml,json --name Procfile,README.md,.env.example,Dockerfile,Makefile,pyproject.toml,render.yaml --template=.
      shell: bash
    - run: |
        npm update --save
        npm update --save-dev
      shell: bash
      working-directory: testproject
    - run: npm install --no-optional
      working-directory: testproject
      shell: bash
    - run: npm dedupe
      working-directory: testproject
      shell: bash
    - run: npm run test
      working-directory: testproject
      shell: bash
    - run: npm run lint
      working-directory: testproject
      shell: bash
    - run: npm run build
      working-directory: testproject
      shell: bash
    - run: pip install poetry==1.5.1 --upgrade
      working-directory: testproject
      shell: bash
    - run: poetry install --with dev --no-root --no-interaction --no-ansi
      working-directory: testproject
      shell: bash
    - run: cp testproject/settings/local.py.example testproject/settings/local.py
      working-directory: testproject/backend
      shell: bash
    - run: cp .env.example .env
      working-directory: testproject/backend
      shell: bash
    - run: poetry run python manage.py makemigrations
      working-directory: testproject/backend
      env:
        DATABASE_URL: 'sqlite:///'
      shell: bash
    - run: poetry run python manage.py migrate
      working-directory: testproject/backend
      env:
        DATABASE_URL: 'sqlite:///'
      shell: bash
    - run: poetry run python manage.py test
      working-directory: testproject/backend
      env:
        DATABASE_URL: 'sqlite:///'
      shell: bash
    - name: Generate secret key
      run: echo '::set-output name=SECRET_KEY::`python -c "import uuid; print(uuid.uuid4().hex + uuid.uuid4().hex)"`'
      id: secret-id-generator
      shell: bash
    - run: poetry run prospector -X ./backend
      working-directory: testproject
      env:
        SECRET_KEY: ${{ steps.secret-id-generator.outputs.SECRET_KEY }}
        SENDGRID_USERNAME: foo
        SENDGRID_PASSWORD: password
        DJANGO_SETTINGS_MODULE: 'testproject.settings.local'
        ALLOWED_HOSTS: '.example.org'
        REDIS_URL: 'redis://'
        DATABASE_URL: 'sqlite:///'
      shell: bash
    - run: poetry run python manage.py makemigrations --check --dry-run
      working-directory: testproject/backend
      env:
        DATABASE_URL: 'sqlite:///'
      shell: bash
    - run: poetry run python manage.py check --deploy --fail-level WARNING
      working-directory: testproject/backend
      env:
        SECRET_KEY: ${{ steps.secret-id-generator.outputs.SECRET_KEY }}
        SENDGRID_USERNAME: foo
        SENDGRID_PASSWORD: password
        DJANGO_SETTINGS_MODULE: 'testproject.settings.production'
        ALLOWED_HOSTS: '.example.org'
        REDIS_URL: 'redis://'
        DATABASE_URL: 'sqlite:///'
      shell: bash
